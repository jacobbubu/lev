#!/usr/bin/env node

var fs = require('fs')
var path = require('path')
var net = require('net')
var readline = require('readline')

var Tree = require('level-subtree')
var deepmerge = require('deepmerge')
var reconnect = require('reconnect')
var Sublevel = require('level-sublevel')
var multilevel = require('multilevel')
var deleteRange = require('level-delete-range')
var level = require('level')
var bytewise = require('bytewise/hex')

var utils = require('./lib/utils')

var args = require('optimist')

var argv = args
  .usage('lev [path] [options]')

  .alias('t', 'tree')
  .describe('tree', 'List sublevels as a tree')

  .describe('c', 'Creates a database')

  .alias('d', 'del')
  .describe('del', 'Remove an entity')

  .alias('g', 'get')
  .describe('get', 'Get an record based on the key')

  .describe('put --value', 'Insert a new value')

  .describe('port', 'Connect to a remote instance')

  .alias('k', 'keys')
  .describe('keys', 'Return only keys')

  .alias('l', 'limit')
  .describe('limit', 'The number of entities to return')

  .alias('s', 'start')
  .describe('start', 'The starting key for a read')

  .alias('e', 'end')
  .describe('end', 'The end key')

  .describe('cd', 'Change into or create a sublevel')

  .alias('h', 'help')
  .describe('help', 'Print this help text')
  .argv

if (argv.h || argv.help || process.argv.length == 2) {
  console.log(args.help())
  process.exit(0)
}

var db
var tree

try {
  var settingsFile = utils.find('.lev');
  var defaults = JSON.parse(fs.readFileSync(settingsFile)) || {}
  argv = deepmerge(argv, defaults)
}
catch(ex) {

  if (ex.name === 'SyntaxError') {
    console.log('error parsing settings file [%s]', ex.message)
  }
}

if (argv.keyEncoding && argv.keyEncoding === 'bytewise')
  argv.keyEncoding = bytewise;

if (argv.valueEncoding && argv.valueEncoding === 'bytewise')
  argv.valueEncoding = bytewise;

var postConnect = function() {

  tree = Tree(db)
  db = Sublevel(db, argv.sep)

  var allCommands = ['get', 'delr', 'limit', 'keys', 'start', 'end', 'tree']
  var filter = utils.filter(Object.keys(args.argv), allCommands.concat(Object.keys(db)))

  if ('keys' in argv) {
    argv.values = false
    argv.createReadStream = true
  }

  ;['limit', 'start', 'end'].forEach(function(arg) {
    if (filter[arg]) { argv.createReadStream = true }
  })

  filter.length > 0
    ? require('./lib/cli')(argv, db, tree)
    : require('./lib/repl')(argv, db, tree)
}

if (argv.port) {

  reconnect(function (stream) {

    db = multilevel.client()
    var dbstm = db.createRpcStream()
    dbstm.pipe(stream).pipe(dbstm)

    // If it is a put get or delete then close the process as soon as the data has returned.
    var isPRD = false

    //If it is a query then we need to flag createReadStream
    ;['put', 'get', 'del'].forEach(function(arg) {
      if (argv[arg]) { isPRD = true }
    })

    stream.on('data', function(data) {
      if (isPRD) {
        // We are CLI so close after response
        process.exit()
      }
    })

    postConnect()
  }).listen(argv.port)

}
else {

   db = level(utils.location(), argv)
   postConnect();
}


